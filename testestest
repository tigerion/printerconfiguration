-------TESTINGONLY----
# ─────────────────────────  CONFIG  ─────────────────────────
$logDate     = Get-Date -Format 'yyyy-MM-dd'
$logFilePath = "$PSScriptRoot\EnterTimerLog-$logDate.txt"

# ─────────────────────  SIMPLE LOGGER  ─────────────────────
function Log-Message {
    param([string]$Message)
    $ts   = Get-Date -Format 'yyyy-MM-dd HH:mm:ss'
    $line = "$ts - $Message"
    Write-Host $line
    $line | Out-File -LiteralPath $logFilePath -Append -Encoding UTF8
}

# ──────────────────  ENTER-KEY TIMER (SendKeys)  ───────────
function Start-EnterTimer {
    param([int]$IntervalSeconds = 5)

    # If already running, skip
    if ($script:EnterTimerRunning) {
        Log-Message "Enter-timer already running."
        return
    }

    # COM object used to send keystrokes
    $script:wshell = New-Object -ComObject WScript.Shell

    # Timer fires on current runspace
    $script:enterTimer = New-Object System.Timers.Timer ($IntervalSeconds * 1000)
    $script:enterTimer.AutoReset = $true

    Register-ObjectEvent -InputObject $script:enterTimer -EventName Elapsed `
        -SourceIdentifier EnterTimerEvent `
        -Action {
            try { $script:wshell.SendKeys('{ENTER}') } catch {}
        } | Out-Null

    $script:enterTimer.Start()
    $script:EnterTimerRunning = $true
    Log-Message "Enter-key timer started (interval = $IntervalSeconds s)."
}

function Stop-EnterTimer {
    if (-not $script:EnterTimerRunning) {
        Log-Message "Enter-timer is not running."
        return
    }

    try {
        Unregister-Event -SourceIdentifier EnterTimerEvent -ErrorAction SilentlyContinue
        $script:enterTimer.Stop()
        $script:enterTimer.Dispose()
        [System.Runtime.Interopservices.Marshal]::ReleaseComObject($script:wshell) | Out-Null
    } catch {}

    $script:enterTimer       = $null
    $script:wshell           = $null
    $script:EnterTimerRunning = $false
    Log-Message "Enter-key timer stopped."
}
---------TESTINGONLY-----TOBEDELETED----



# ------------------------------ CONFIGURATION ------------------------------
# Path to the CSV file containing TTPs, TestNumbers, and Arguments
$csvFilePath = "C:\AtomicRedTeam\ExecutedTTPs_FULL.csv"  # Adjust this path
 
# Create log file with current date in the filename
$logDate = Get-Date -Format "yyyy-MM-dd"
$logFilePath = "C:\AtomicRedTeam\ExecutionLogs\AtomicTestLog-$logDate.txt"  # Adjust path as necessary
 
# ------------------------------ FUNCTIONS ------------------------------

### ── GLOBAL ENTER-KEY PRESSER USING SendKeys ─────────────────────────────
function Start-EnterTimer {
    param([int]$IntervalSeconds = 5)

    # COM object to send keys
    $script:__wshell = New-Object -ComObject WScript.Shell

    # Timer that fires in this runspace
    $script:__enterTimer = New-Object System.Timers.Timer ($IntervalSeconds * 1000)
    $script:__enterTimer.AutoReset = $true
    $null = Register-ObjectEvent -InputObject $script:__enterTimer -EventName Elapsed `
        -SourceIdentifier EnterTimer `
        -Action {
            try {
                # Send Enter key to whichever window is focused
                $script:__wshell.SendKeys("{ENTER}")
            } catch {
                # ignore transient COM errors
            }
        }

    $script:__enterTimer.Start()
    Log-Message "Enter-key timer started (fires every $IntervalSeconds s)."
}

function Stop-EnterTimer {
    if ($script:__enterTimer) {
        Unregister-Event -SourceIdentifier EnterTimer -ErrorAction SilentlyContinue
        $script:__enterTimer.Stop()
        $script:__enterTimer.Dispose()
        $script:__enterTimer = $null
        if ($script:__wshell) { [System.Runtime.Interopservices.Marshal]::ReleaseComObject($script:__wshell) | Out-Null }
        Log-Message "Enter-key timer stopped."
    }
}

  
 
### Logging function (writes to console and log file)
function Log-Message {
    param ([string]$message)
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $logEntry = "$timestamp - $message"
    Write-Host $logEntry
    Add-Content -Path $logFilePath -Value $logEntry
}
 
### Backup current environment variables
function Capture-EnvironmentVariables {
    Log-Message "Capturing environment variables..."
    $envVariables = @{
        "User"   = [System.Collections.Hashtable]::Synchronized([System.Environment]::GetEnvironmentVariables("User"))
        "System" = [System.Collections.Hashtable]::Synchronized([System.Environment]::GetEnvironmentVariables("Machine"))
    }
    Log-Message "Environment variables captured."
    return $envVariables
}
 
### Restore environment variables from backup
function Restore-EnvironmentVariables {
    param ([hashtable]$originalEnv)
    Log-Message "Restoring environment variables..."
    foreach ($key in $originalEnv["User"].Keys) {
        [System.Environment]::SetEnvironmentVariable($key, $originalEnv["User"][$key], "User")
    }
    foreach ($key in $originalEnv["System"].Keys) {
        try {
            [System.Environment]::SetEnvironmentVariable($key, $originalEnv["System"][$key], "Machine")
        } catch {
            Log-Message "Error restoring system environment variable ${$key}: $_"
        }
    }
    Log-Message "Environment variables restored."
}
 
### Kill remaining processes (e.g. Notepad and Calculator)
function Close-RemainingProcesses {
    param ([string[]]$processesToKill = @("notepad", "calc","win32calc"))
    foreach ($processName in $processesToKill) {
        $runningProcesses = Get-Process -Name $processName -ErrorAction SilentlyContinue
        if ($runningProcesses) {
            foreach ($process in $runningProcesses) {
                try {
                    $process.CloseMainWindow() | Out-Null
                    if (-not $process.WaitForExit(5)) {
                        $process.Kill()
                        Log-Message "$processName (PID: $($process.Id)) killed."
                    } else {
                        Log-Message "$processName (PID: $($process.Id)) closed gracefully."
                    }
                } catch {
                    Log-Message "Error while closing $processName (PID: $($process.Id)): $_"
                }
            }
        } else {
            Log-Message "No $processName processes found running."
        }
    }
}
 
### Parse the Arguments string from CSV into a hashtable
function Parse-Arguments {
    param ([string]$argString)
    $argHashtable = @{}
    if (-not [string]::IsNullOrEmpty($argString)) {
        $argPairs = $argString -split ','
        foreach ($pair in $argPairs) {
            if ($pair -match '=') {
                $key, $value = $pair -split '=', 2
                $argHashtable[$key.Trim()] = $value.Trim()
            } else {
                Log-Message "Invalid argument format: $pair. Skipping."
            }
        }
    }
    return $argHashtable
}
 
### Execute an Atomic Test (and perform its cleanup)
function Run-AtomicTest {
    param (
        [string]$ttpID,
        [int]$testNumber = $null,
        [hashtable]$testArgs = $null
    )
    $testID = if ($testNumber) { "${ttpID}.${testNumber}" } else { $ttpID }
 
    try {
        # Execute the test based on available parameters
        if ($testNumber -and $testArgs) {
            Log-Message "Executing test $testID with arguments: $testArgs"
            Invoke-AtomicTest $ttpID -TestNumbers $testNumber -InputArgs $testArgs
        } elseif ($testNumber) {
            Log-Message "Executing test $testID without arguments"
            Invoke-AtomicTest $ttpID -TestNumbers $testNumber
        } else {
            Log-Message "Executing TTP $ttpID without a test number"
            Invoke-AtomicTest $ttpID
        }
        Log-Message "Successfully executed $testID"
    } catch {
        Log-Message "Error executing ${$testID}: $_"
    } finally {
        # Perform Atomic Red Team cleanup
        try {
            Log-Message "Starting Atomic Red Team cleanup for $testID"
            if ($testNumber) {
                $cleanupResult = Invoke-AtomicTest $ttpID -TestNumbers $testNumber -Cleanup -Verbose 4>&1 | Out-String
            } else {
                $cleanupResult = Invoke-AtomicTest $ttpID -Cleanup -Verbose 4>&1 | Out-String
            }
            if ($cleanupResult -match "Cleanup completed|Success") {
                Log-Message "Atomic Red Team cleanup completed for ${$testID}: $cleanupResult"
            } else {
                Log-Message "Atomic Red Team cleanup may not have fully completed for $testID. Output: $cleanupResult"
            }
        } catch {
            Log-Message "Error during Atomic Red Team cleanup for ${$testID}: $_"
        }
    }
}
 
# ------------------------------ MAIN EXECUTION ------------------------------


# Capture environment variables backup
$originalEnv = Capture-EnvironmentVariables
 
Start-EnterTimer -IntervalSeconds 5
Log-Message "Enter‑key timer started (fires every 5 s)."
 
# Initialize a hashtable to store tests by TTP
$ttpTests = @{}
 
# Read and parse the CSV file robustly
try {
    $csvContent = Import-Csv -Path $csvFilePath -Header "TTP", "TestNumber", "Arguments"
    foreach ($row in $csvContent) {
        $ttpID = $row.TTP
        if ([string]::IsNullOrEmpty($ttpID)) {
            Log-Message "Row with missing TTP identifier found; skipping."
            continue
        }
        # Use a temporary variable for TestNumber parsing
        $parsedTestNumber = $null
        $testNumber = $null
        if ($row.TestNumber -and [int]::TryParse($row.TestNumber, [ref]$parsedTestNumber)) {
            $testNumber = $parsedTestNumber
        }
        $arguments = $row.Arguments
        $parsedArguments = if ($arguments -and $arguments.Trim() -ne "") { Parse-Arguments -argString $arguments } else { $null }
        if (-not $ttpTests.ContainsKey($ttpID)) {
            $ttpTests[$ttpID] = @()
        }
        $ttpTests[$ttpID] += @{
            TestNumber = $testNumber
            Arguments  = $parsedArguments
        }
    }
    Log-Message "Successfully read TTPs, test numbers, and arguments from CSV."
} catch {
    Log-Message "Error reading from CSV: $_"
    exit 1
}
 
# Execute each test
foreach ($ttpID in $ttpTests.Keys) {
    foreach ($testEntry in $ttpTests[$ttpID]) {
        Run-AtomicTest -ttpID $ttpID -testNumber $testEntry.TestNumber -testArgs $testEntry.Arguments
    }
}
 
# Post-execution: restore environment variables and close any remaining processes
Restore-EnvironmentVariables -originalEnv $originalEnv
Log-Message "Environment variables restored."
Close-RemainingProcesses
Log-Message "All remaining Notepad and Calculator processes were closed."
 
Log-Message "ALL TESTS, ATOMIC RED TEAM CLEANUP, PROCESS TERMINATION, AND ENVIRONMENT RESTORATION COMPLETED "
 
Stop-EnterTimer
Log-Message "Enter‑key timer stopped."
