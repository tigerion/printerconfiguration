function Run-AtomicTest {
    param (
        [string]$ttpID,
        [int]$testNumber = $null,
        [hashtable]$testArgs = $null
    )

    $testID = if ($testNumber) { "${ttpID}.${testNumber}" } else { $ttpID }

    try {
        # Execute the test with or without arguments
        if ($testNumber -and $testArgs) {
            Log-Message "Executing test $testID with arguments: $testArgs"
            Invoke-AtomicTest $ttpID -TestNumbers $testNumber -InputArgs $testArgs
        } elseif ($testNumber) {
            Log-Message "Executing test $testID without arguments"
            Invoke-AtomicTest $ttpID -TestNumbers $testNumber
        } else {
            Log-Message "Executing TTP $ttpID without a test number"
            Invoke-AtomicTest $ttpID
        }
        Log-Message "Successfully executed $testID"
    } catch {
        Log-Message "Error executing $testID: $_"
    } finally {
        # Cleanup process
        try {
            Log-Message "Starting cleanup for $testID"
            if ($testNumber) {
                # Cleanup for specific test number
                $cleanupResult = Invoke-AtomicTest $ttpID -TestNumbers $testNumber -Cleanup -Verbose 4>&1 | Out-String
            } else {
                # Cleanup for the entire TTP
                $cleanupResult = Invoke-AtomicTest $ttpID -Cleanup -Verbose 4>&1 | Out-String
            }

            # Wait until cleanup is confirmed or log possible issues
            if ($cleanupResult -match "Cleanup completed|Success") {
                Log-Message "Cleanup completed for $testID: $cleanupResult"
            } else {
                Log-Message "Cleanup may not have fully completed for $testID. Output: $cleanupResult"
            }
        } catch {
            Log-Message "Error during cleanup for $testID: $_"
        }
    }
}
