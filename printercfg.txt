# Path to the CSV file containing TTPs and test numbers
$csvFilePath = "C:\AtomicRedTeam\ExecutedTTPs_TEST.csv"  # Adjust this path

# Logging function to capture output to both console and log file
function Log-Message {
    param (
        [string]$message
    )
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $logEntry = "$timestamp - $message"
    Write-Host $logEntry
    Add-Content -Path $logFilePath -Value $logEntry
}

# Function to capture current environment variables
function Capture-EnvironmentVariables {
    Log-Message "Capturing environment variables..."

    # Capture user and system environment variables
    $envVariables = @{
        "User" = [System.Collections.Hashtable]::Synchronized([System.Environment]::GetEnvironmentVariables("User"))
        "System" = [System.Collections.Hashtable]::Synchronized([System.Environment]::GetEnvironmentVariables("Machine"))
    }

    Log-Message "Environment variables captured."
    return $envVariables
}

# Function to parse arguments into hashtable
function Parse-Arguments {
    param (
        [string]$argString
    )
    $argHashtable = @{}

    # Check if there are any arguments
    if (-not [string]::IsNullOrEmpty($argString)) {
        # Split arguments by commas
        $argPairs = $argString -split ','

        foreach ($pair in $argPairs) {
            # Split each pair by '=' and add it to the hashtable
            if ($pair -match '=') {
                $key, $value = $pair -split '=', 2
                Log-Message "key= $($key) value=$($value)"
                $key = [string]$key.Trim() # Remove extra spaces
                $value = [string]$value.Trim() # Remove extra spaces
                Log-Message "keyAfterTrim= $($key) valueAfterTrim= $($value)"
                $argHashtable[$key] = $value # Add key-value pair to hashtable
            } else {
                Log-Message "Invalid argument format: $pair. Skipping."
            }
        }
    }
    return $argHashtable
}

# Function to restore environment variables
function Restore-EnvironmentVariables {
    param (
        [hashtable]$originalEnv
    )

    Log-Message "Restoring environment variables..."

    # Restore user environment variables
    foreach ($key in $originalEnv["User"].Keys) {
        [System.Environment]::SetEnvironmentVariable($key, $originalEnv["User"][$key], "User")
    }

    # Restore system environment variables (requires elevated permissions)
    foreach ($key in $originalEnv["System"].Keys) {
        try {
            [System.Environment]::SetEnvironmentVariable($key, $originalEnv["System"][$key], "Machine")
        } catch {
            Log-Message "Error restoring system environment variable ${key}: $_"
        }
    }

    Log-Message "Environment variables restored."
}

# Function to kill Calculator (calc.exe) and Notepad (notepad.exe) processes
function Close-RemainingProcesses {
    param (
        [string[]]$processesToKill = @("notepad", "calc")
    )

    foreach ($processName in $processesToKill) {
        $runningProcesses = Get-Process -Name $processName -ErrorAction SilentlyContinue
        if ($runningProcesses) {
            foreach ($process in $runningProcesses) {
                try {
                    $process.CloseMainWindow() | Out-Null
                    if (-not $process.WaitForExit(5)) {
                        $process.Kill()
                        Log-Message "$processName (PID: $($process.Id)) killed."
                    } else {
                        Log-Message "$processName (PID: $($process.Id)) closed gracefully."
                    }
                } catch {
                    Log-Message "Error while closing $processName (PID: $($process.Id)): $_"
                }
            }
        } else {
            Log-Message "No $processName processes found running."
        }
    }
}

# Function to run Atomic Test and Cleanup
function Run-AtomicTest {
    param (
        [string]$ttpID,
        [int]$testNumber,
        [hashtable]$testArgs
    )

    $testID = "${ttpID}.${testNumber}"

    # Try to run the test, handle any errors, and ensure cleanup
    try {
        Log-Message "Starting Atomic Test $testID with arguments: $testArgs"
        Invoke-AtomicTest $ttpID -TestNumbers $testNumber -InputArgs $testArgs
        Log-Message "Successfully executed Atomic Test $testID"
    } catch {
        Log-Message "Error executing Atomic Test ${testID}: $_"
        if ($_.Exception) {
            Log-Message "Exception details: $($_.Exception.Message)"
        }
    } finally {
        # Ensure cleanup is executed
        try {
            Log-Message "Starting cleanup for Atomic Test $testID"
            Invoke-AtomicTest $ttpID -TestNumbers $testNumber -Cleanup
            Log-Message "Cleanup successful for Atomic Test $testID"
        } catch {
            Log-Message "Error during cleanup for Atomic Test ${testID}: $_"
            if ($_.Exception) {
                Log-Message "Cleanup Exception details: $($_.Exception.Message)"
            }
        }
    }
}

# Create log file with current date in the filename
$logDate = Get-Date -Format "yyyy-MM-dd"
$logFilePath = "C:\AtomicRedTeam\ExecutionLogs\AtomicTestLog-$logDate.txt"  # Adjust path as necessary

# Capture the original environment variables before running the tests
$originalEnv = Capture-EnvironmentVariables

# Read TTPs, Test Numbers, and Arguments from CSV file
$ttpTests = @{}

try {
    # Read CSV and populate $ttpTests hashtable
    $csvContent = Import-Csv -Path $csvFilePath -Header "TTP", "TestNumber", "Arguments"
    foreach ($row in $csvContent) {
        $ttpID = $row.TTP
        if ([int]::TryParse($row.TestNumber, [ref]$testNumber)) {
            $testNumber = [int]$row.TestNumber
        } else {
            Log-Message "Invalid TestNumber: '$($row.TestNumber)' for TTP '$($row.TTP)'. Skipping this entry."
            continue
        }

        $arguments = $row.Arguments
        $parsedArguments = Parse-Arguments -argString $arguments
        Log-Message "Parsed Arguments for TTP $ttpID, TestNumber $testNumber: $parsedArguments"

        # Store the test number and parsed arguments in the hashtable
        if (-not $ttpTests.ContainsKey($ttpID)) {
            $ttpTests[$ttpID] = @()
        }
        $ttpTests[$ttpID] += @{
            TestNumber = $testNumber
            Arguments = $parsedArguments  # Store parsed arguments
        }
    }

    Log-Message "Successfully read TTPs, test numbers, and arguments from CSV."
} catch {
    Log-Message "Error reading from CSV: $_"
    exit 1  # Exit the script if CSV reading fails
}

# Loop through each TTP and its test numbers
foreach ($ttpID in $ttpTests.Keys) {
    foreach ($testEntry in $ttpTests[$ttpID]) {
        $testNumber = $testEntry.TestNumber
        $testArgs = $testEntry.Arguments

        Log-Message "Executing Test: TTP $ttpID, TestNumber $testNumber, with arguments: $testArgs"

        try {
            if ($testArgs.Count -gt 0) {
                Run-AtomicTest -ttpID $ttpID -testNumber $testNumber -testArgs $testArgs
            } else {
                Run-AtomicTest -ttpID $ttpID -testNumber $testNumber
            }
        } catch {
            Log-Message "Error running Testnumber $testNumber for TTP $($ttpID): $_"
        }
    }
}

# Restore environment variables after the tests and cleanups
Restore-EnvironmentVariables -originalEnv $originalEnv
Log-Message "All tests, cleanup processes, and environment restoration completed."

# Close any remaining processes (calc, notepad, etc.)
Close-RemainingProcesses
Log-Message "All remaining notepad and calculator processes were closed."
